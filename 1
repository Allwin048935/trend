import requests
import ccxt
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
from io import BytesIO
import asyncio
import nest_asyncio
from telegram import Bot
import config  # Import the config module
import ta  # Import ta library
import logging
from datetime import datetime, timedelta
import time
import hmac
import hashlib
from urllib.parse import urlencode
import json

# Set up logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

file_handler = logging.FileHandler('trading_bot.log')
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))

console_handler = logging.StreamHandler()
console_handler.setLevel(logging.WARNING)
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))

logger.handlers.clear()
logger.addHandler(file_handler)
logger.addHandler(console_handler)

logging.getLogger('urllib3').setLevel(logging.WARNING)
logging.getLogger('ccxt').setLevel(logging.WARNING)

# Time interval and trendline parameters
interval = '2h'  # For trendline and EMA calculation
CHECK_INTERVAL = '15m'  # For price cross check
PRIMARY_TRENDLINE_LENGTH = 15
SECONDARY_TRENDLINE_LENGTH = 15
INITIAL_MAX_TRENDLINES = 3  # Initial limit per type
MAX_STORED_TRENDLINES = 10  # Maximum total stored trendlines
ALERT_COOLDOWN = timedelta(hours=2)  # Cooldown period matching EMA interval

# Pionex API setup
BASE_URL = "https://api.pionex.com"
PIONEX_API_KEY = config.PIONEX_API_KEY
PIONEX_SECRET_KEY = config.PIONEX_SECRET_KEY

# Binance client
binance = ccxt.binance({
    'apiKey': config.BINANCE_API_KEY,
    'secret': config.BINANCE_API_SECRET,
    'enableRateLimit': True,
    'options': {'defaultType': 'future'}
})

# Store trendlines, active orders, and last alert times
stored_trendlines = {}  # Format: {symbol: {'lines': [...], 'stored_time': datetime}}
active_orders = {}  # Format: {symbol: {'buy_order_id': str, 'sell_order_id': str, 'quantity': float, 'entry_price': float}}
last_alert_times = {}  # Format: {symbol: datetime} for tracking last buy alert

# Pionex API Functions
def generate_signature(method, path, params, body=None):
    timestamp = str(int(time.time() * 1000))
    query_params = params.copy()
    query_params['timestamp'] = timestamp
    sorted_params = urlencode(sorted(query_params.items()), quote_via=lambda x, *_: x)
    path_url = f"{path}?{sorted_params}"
    string_to_sign = f"{method.upper()}{path_url}"
    if body:
        body_str = json.dumps(body, separators=(',', ':'))
        string_to_sign += body_str
    signature = hmac.new(
        PIONEX_SECRET_KEY.encode('utf-8'),
        string_to_sign.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()
    return signature, timestamp

def api_request(method, endpoint, params=None, body=None):
    if params is None:
        params = {}
    signature, timestamp = generate_signature(method, endpoint, params, body)
    params['timestamp'] = timestamp
    url = f"{BASE_URL}{endpoint}"
    headers = {
        "PIONEX-KEY": PIONEX_API_KEY,
        "PIONEX-SIGNATURE": signature,
        "Content-Type": "application/json"
    }
    try:
        if method == "GET":
            response = requests.get(url, headers=headers, params=params)
        elif method == "POST":
            response = requests.post(url, headers=headers, params=params, data=json.dumps(body, separators=(',', ':')))
        elif method == "DELETE":
            response = requests.delete(url, headers=headers, params=params, data=json.dumps(body, separators=(',', ':')))
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"API request failed for {endpoint}: {e}")
        return None

def fetch_pionex_symbols():
    endpoint = "/api/v1/common/symbols"
    params = {}
    data = api_request("GET", endpoint, params)
    if data and 'data' in data and 'symbols' in data['data']:
        symbols = [s['symbol'].replace("_USDT", "USDT") for s in data['data']['symbols'] 
                   if s['quoteCurrency'] == 'USDT' and s['enable']]
        return symbols
    logger.error("Failed to fetch symbols from Pionex - check API key or network")
    return []

def fetch_binance_symbols():
    try:
        markets = binance.load_markets()
        symbols = [symbol.replace('/', '') for symbol in markets.keys() if symbol.endswith('/USDT') and markets[symbol]['active']]
        return symbols
    except Exception as e:
        logger.error(f"Failed to fetch Binance symbols: {e}")
        return []

pionex_symbols = set(fetch_pionex_symbols())
binance_symbols = set(fetch_binance_symbols())
SELECTED_SYMBOLS = list(pionex_symbols.intersection(binance_symbols))

# Pionex API Helper Functions
def get_symbol_info(symbol):
    endpoint = "/api/v1/common/symbols"
    pionex_symbol = symbol.replace("USDT", "_USDT")
    params = {"symbols": pionex_symbol}
    data = api_request("GET", endpoint, params)
    if data and 'data' in data and 'symbols' in data['data'] and data['data']['symbols']:
        return data['data']['symbols'][0]
    logger.error(f"Failed to fetch symbol info for {pionex_symbol}")
    return None

def get_account_balance(symbol):
    endpoint = "/api/v1/account/balances"
    params = {}
    data = api_request("GET", endpoint, params)
    if data and 'data' in data and 'balances' in data['data']:
        base_currency = symbol.replace("USDT", "")
        for balance in data['data']['balances']:
            if balance['coin'] == base_currency:
                return float(balance['free'])
    logger.error(f"Failed to fetch balance for {symbol}")
    return 0.0

def place_market_order(symbol, side, amount_usdt=13.0, quantity=None):
    endpoint = "/api/v1/trade/order"
    params = {}
    symbol_info = get_symbol_info(symbol)
    if not symbol_info:
        return None, None
    pionex_symbol = symbol.replace("USDT", "_USDT")
    best_bid, best_ask = get_current_price(symbol)
    if not best_bid or not best_ask:
        return None, None
    quote_precision = int(symbol_info['quotePrecision'])
    base_precision = int(symbol_info['basePrecision'])
    min_amount = float(symbol_info['minAmount'])
    amount_usdt = max(amount_usdt, min_amount)
    body = {
        "symbol": pionex_symbol,
        "side": side.upper(),
        "type": "MARKET",
    }
    if side.upper() == "BUY":
        body["amount"] = f"{amount_usdt:.{quote_precision}f}"
        buy_quantity = amount_usdt / best_bid
        buy_quantity = f"{buy_quantity:.{base_precision}f}"
    else:
        if quantity is None:
            quantity = amount_usdt / best_bid
        body["size"] = f"{quantity:.{base_precision}f}"
        buy_quantity = None

    response = api_request("POST", endpoint, params, body)
    if response and 'data' in response and response['result']:
        return response['data']['orderId'], buy_quantity if side.upper() == "BUY" else None
    logger.error(f"Market {side} order failed for {pionex_symbol}: {response}")
    return None, None

def place_limit_order(symbol, side, quantity, price):
    endpoint = "/api/v1/trade/order"
    params = {}
    symbol_info = get_symbol_info(symbol)
    if not symbol_info:
        return None
    pionex_symbol = symbol.replace("USDT", "_USDT")
    quote_precision = int(symbol_info['quotePrecision'])
    base_precision = int(symbol_info['basePrecision'])
    price = float(f"{price:.{quote_precision}f}")
    body = {
        "symbol": pionex_symbol,
        "side": side.upper(),
        "type": "LIMIT",
        "size": f"{quantity:.{base_precision}f}",
        "price": f"{price:.{quote_precision}f}",
        "IOC": False
    }
    response = api_request("POST", endpoint, params, body)
    if response and 'data' in response and response['result']:
        return response['data']['orderId']
    logger.error(f"Limit {side} order failed for {pionex_symbol}: {response}")
    return None

def cancel_order(symbol, order_id):
    endpoint = "/api/v1/trade/order"
    pionex_symbol = symbol.replace("USDT", "_USDT")
    params = {}
    body = {
        "symbol": pionex_symbol,
        "orderId": order_id
    }
    response = api_request("DELETE", endpoint, params, body)
    if response and 'result' in response and response['result']:
        return True
    logger.error(f"Cancel order failed for {pionex_symbol} order {order_id}: {response}")
    return False

def get_current_price(symbol):
    endpoint = "/api/v1/market/depth"
    pionex_symbol = symbol.replace("USDT", "_USDT")
    params = {"symbol": pionex_symbol}
    data = api_request("GET", endpoint, params)
    if data and 'data' in data and 'bids' in data['data'] and 'asks' in data['data']:
        best_bid = float(data['data']['bids'][0][0])
        best_ask = float(data['data']['asks'][0][0])
        return best_bid, best_ask
    logger.error(f"Failed to fetch price for {pionex_symbol}")
    return None, None

# Binance Data Functions
def get_historical_data(symbol, interval, limit=300):
    try:
        ohlcv = binance.fetch_ohlcv(symbol, interval, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.columns = ['timestamp', 'Open', 'High', 'Low', 'Close', 'Volume']
        return df
    except ccxt.ExchangeError as e:
        logger.error(f"Binance fetch error for {symbol}: {e}")
        return pd.DataFrame()

def calculate_ema(df, period):
    return ta.trend.EMAIndicator(df['Close'], window=period).ema_indicator()

def check_ema_crossover(df, short_period, long_period):
    short_ema = calculate_ema(df, short_period)
    long_ema = calculate_ema(df, long_period)
    if len(short_ema) < 3 or len(long_ema) < 3:
        return False, False
    prev_short = short_ema.iloc[-3]
    prev_long = long_ema.iloc[-3]
    curr_short = short_ema.iloc[-2]
    curr_long = long_ema.iloc[-2]
    cross_over = prev_short <= prev_long and curr_short > curr_long
    cross_under = prev_short >= prev_long and curr_short < curr_long
    return cross_over, cross_under

# Trendline Functions
def find_pivot_points(series, length, left_length):
    pivots_high = pd.Series(index=series.index, dtype=float)
    pivots_low = pd.Series(index=series.index, dtype=float)
    
    for i in range(left_length, len(series) - left_length):
        if series.iloc[i] == max(series.iloc[i-left_length:i+left_length+1]):
            pivots_high.iloc[i] = series.iloc[i]
        if series.iloc[i] == min(series.iloc[i-left_length:i+left_length+1]):
            pivots_low.iloc[i] = series.iloc[i]
    
    return pivots_high, pivots_low

def calculate_trendlines(df, pivots, length, extension_days=3, initial_max=INITIAL_MAX_TRENDLINES):
    trendlines = []
    pivot_points = pivots.dropna()
    if len(pivot_points) < 2:
        return trendlines
    
    timestamps = df['timestamp']
    last_timestamp = timestamps.iloc[-1]
    
    for i in range(1, len(pivot_points)):
        idx1 = pivot_points.index[i-1]
        idx2 = pivot_points.index[i]
        
        x1 = timestamps.loc[idx1]
        x2 = timestamps.loc[idx2]
        y1 = pivot_points.iloc[i-1]
        y2 = pivot_points.iloc[i]
        
        time_diff = (x2 - x1).total_seconds() / 3600
        slope = (y2 - y1) / time_diff if time_diff != 0 else 0
        
        x_end = last_timestamp + pd.Timedelta(days=extension_days)
        extension_time = (x_end - x2).total_seconds() / 3600
        y_end = y2 + slope * extension_time
        
        trendlines.append({
            'x1': x1, 'y1': y1,
            'x2': x_end, 'y2': y_end,
            'slope': slope,
            'timestamp': x2
        })
    
    return trendlines[:initial_max] if len(trendlines) > initial_max else trendlines

def check_price_cross_trendlines(trendlines, df_15m):
    if len(df_15m) < 3 or not trendlines:
        return False, False
    
    last_close = df_15m['Close'].iloc[-2]
    prev_close = df_15m['Close'].iloc[-3]
    last_timestamp = df_15m['timestamp'].iloc[-1]
    
    cross_over = False
    cross_under = False
    
    for tl in trendlines:
        time_from_start = (last_timestamp - tl['x1']).total_seconds() / 3600
        tl_value = tl['y1'] + tl['slope'] * time_from_start
        
        if prev_close <= tl_value and last_close > tl_value:
            cross_over = True
        if prev_close >= tl_value and last_close < tl_value:
            cross_under = True
    
    return cross_over, cross_under

def plot_candles(df, symbol, title):
    if df.empty or len(df) < 5:
        logger.warning(f"Not enough data to plot candles for {symbol}: {len(df)} rows")
        return None
    
    try:
        df_plot = df.set_index('timestamp')
        df_plot = df_plot[['Open', 'High', 'Low', 'Close']].copy()
        
        mc = mpf.make_marketcolors(up='#2fc71e', down='#ed2f1a', inherit=True)
        s = mpf.make_mpf_style(base_mpl_style=['bmh', 'dark_background'], marketcolors=mc, y_on_right=True)
        
        short_ema = calculate_ema(df, 3)
        long_ema = calculate_ema(df, 7)
        
        add_plots = [
            mpf.make_addplot(short_ema, color='cyan', width=1.5, linestyle='-'),
            mpf.make_addplot(long_ema, color='magenta', width=1.5, linestyle='-'),
        ]
        
        def trendline_to_series(df, tl):
            series = pd.Series(index=df['timestamp'], dtype=float)
            start_idx = df['timestamp'].searchsorted(tl['x1'])
            end_idx = df['timestamp'].searchsorted(tl['x2'])
            if end_idx >= len(df):
                end_idx = len(df) - 1
            
            if start_idx < len(df) and end_idx < len(df):
                time_diff = (tl['x2'] - tl['x1']).total_seconds() / 3600
                if time_diff != 0:
                    slope = (tl['y2'] - tl['y1']) / time_diff
                    for i in range(start_idx, end_idx + 1):
                        time_from_start = (df['timestamp'].iloc[i] - tl['x1']).total_seconds() / 3600
                        series.iloc[i] = tl['y1'] + slope * time_from_start
            return series
        
        if symbol in stored_trendlines:
            for tl in stored_trendlines[symbol]['lines']:
                color = '#cf0a83' if tl['slope'] < 0 else '#027521'
                trend_series = trendline_to_series(df, tl)
                add_plots.append(mpf.make_addplot(trend_series, color=color, width=2.5))
        
        price_high_pivots, price_low_pivots = find_pivot_points(df['Close'], PRIMARY_TRENDLINE_LENGTH, PRIMARY_TRENDLINE_LENGTH//2)
        price_sec_high_pivots, price_sec_low_pivots = find_pivot_points(df['Close'], SECONDARY_TRENDLINE_LENGTH, SECONDARY_TRENDLINE_LENGTH//2)
        
        primary_high_trendlines = calculate_trendlines(df, price_high_pivots, PRIMARY_TRENDLINE_LENGTH)
        primary_low_trendlines = calculate_trendlines(df, price_low_pivots, PRIMARY_TRENDLINE_LENGTH)
        secondary_high_trendlines = calculate_trendlines(df, price_sec_high_pivots, SECONDARY_TRENDLINE_LENGTH)
        secondary_low_trendlines = calculate_trendlines(df, price_sec_low_pivots, SECONDARY_TRENDLINE_LENGTH)
        
        for tl in primary_high_trendlines + primary_low_trendlines + secondary_high_trendlines + secondary_low_trendlines:
            color = 'red' if tl['slope'] < 0 else 'green'
            trend_series = trendline_to_series(df, tl)
            add_plots.append(mpf.make_addplot(trend_series, color=color, linestyle='--', width=1.5))
        
        fig, axlist = mpf.plot(
            df_plot,
            figratio=(10, 6),
            type="candle",
            style=s,
            tight_layout=True,
            datetime_format='%H:%M',
            ylabel="Price ($)",
            addplot=add_plots,
            returnfig=True
        )
        
        ax = axlist[0]
        ax.set_title(f"{symbol} - {title}", fontsize=25, style='italic', fontfamily='sans-serif')
        
        buf = BytesIO()
        plt.savefig(buf, format='png', bbox_inches='tight')
        buf.seek(0)
        plt.close(fig)
        return buf
    except Exception as e:
        logger.error(f"Error plotting chart for {symbol}: {e}")
        return None

# Telegram Functions
async def send_telegram_message(bot: Bot, chat_id: str, symbol: str, message: str, image_buffer):
    if image_buffer is None:
        logger.warning(f"No image buffer for {symbol}, skipping message")
        return
    
    try:
        await bot.send_photo(chat_id=chat_id, photo=image_buffer)
        await bot.send_message(chat_id=chat_id, text=message)
        logger.info(f"Sent alert for {symbol}: {message}")
    except Exception as e:
        logger.error(f"Failed to send Telegram message for {symbol}: {e}")

async def check_alerts(bot: Bot):
    if not SELECTED_SYMBOLS:
        logger.error("No symbols selected to check - bot cannot proceed without symbols")
        return
    
    for symbol in SELECTED_SYMBOLS:
        try:
            historical_data_2h = get_historical_data(symbol, interval, limit=100)
            if historical_data_2h.empty:
                logger.warning(f"No 2h historical data fetched for {symbol}")
                continue

            historical_data_15m = get_historical_data(symbol, CHECK_INTERVAL, limit=5)
            if historical_data_15m.empty or len(historical_data_15m) < 5:
                logger.warning(f"No or insufficient 15m historical data fetched for {symbol}")
                continue

            historical_data_2h.name = symbol
            historical_data_15m.name = symbol

            # EMA Crossover Check (using 2h interval)
            short_period = 3  # Short EMA period
            long_period = 7   # Long EMA period
            ema_cross_over, ema_cross_under = check_ema_crossover(historical_data_2h, short_period, long_period)

            # Trendline Calculations
            price_high_pivots, price_low_pivots = find_pivot_points(historical_data_2h['Close'], PRIMARY_TRENDLINE_LENGTH, PRIMARY_TRENDLINE_LENGTH//2)
            price_sec_high_pivots, price_sec_low_pivots = find_pivot_points(historical_data_2h['Close'], SECONDARY_TRENDLINE_LENGTH, SECONDARY_TRENDLINE_LENGTH//2)
            
            primary_high_trendlines = calculate_trendlines(historical_data_2h, price_high_pivots, PRIMARY_TRENDLINE_LENGTH)
            primary_low_trendlines = calculate_trendlines(historical_data_2h, price_low_pivots, PRIMARY_TRENDLINE_LENGTH)
            secondary_high_trendlines = calculate_trendlines(historical_data_2h, price_sec_high_pivots, SECONDARY_TRENDLINE_LENGTH)
            secondary_low_trendlines = calculate_trendlines(historical_data_2h, price_sec_low_pivots, SECONDARY_TRENDLINE_LENGTH)
            
            current_stored = stored_trendlines.get(symbol, {'lines': [], 'stored_time': None})
            all_trendlines = (current_stored['lines'] + 
                              primary_high_trendlines + primary_low_trendlines + 
                              secondary_high_trendlines + secondary_low_trendlines)

            price_cross_over, price_cross_under = check_price_cross_trendlines(all_trendlines, historical_data_15m)
            current_time = datetime.now()

            # Buy Logic: EMA Crossover Up with Cooldown
            if ema_cross_over and symbol not in active_orders:
                last_alert = last_alert_times.get(symbol)
                if last_alert is None or (current_time - last_alert) >= ALERT_COOLDOWN:
                    buy_order_id, buy_quantity = place_market_order(symbol, "BUY")
                    if buy_order_id and buy_quantity:
                        best_bid, _ = get_current_price(symbol)
                        if best_bid:
                            entry_price = best_bid
                            sell_price = entry_price * 1.01  # +1% of entry price
                            symbol_info = get_symbol_info(symbol)
                            if symbol_info:
                                precision = int(symbol_info['basePrecision'])
                                sell_quantity = float(f"{float(buy_quantity) * 0.995:.{precision}f}")  # Adjust for fees
                                sell_order_id = place_limit_order(symbol, "SELL", sell_quantity, sell_price)
                                if sell_order_id:
                                    active_orders[symbol] = {
                                        'buy_order_id': buy_order_id,
                                        'sell_order_id': sell_order_id,
                                        'quantity': sell_quantity,
                                        'entry_price': entry_price
                                    }
                                    message = f"Buy #{symbol} - EMA Crossover Up"
                                    title = f'EMA Crossover Up {symbol}'
                                    image_buffer = plot_candles(historical_data_2h, symbol, title)
                                    if image_buffer:
                                        await send_telegram_message(bot, config.CHAT_ID, symbol, message, image_buffer)
                                        last_alert_times[symbol] = current_time  # Update last alert time
                                        new_lines = primary_high_trendlines + primary_low_trendlines
                                        updated_lines = current_stored['lines'] + new_lines
                                        if len(updated_lines) > MAX_STORED_TRENDLINES:
                                            updated_lines = sorted(updated_lines, key=lambda x: x['timestamp'])[-MAX_STORED_TRENDLINES:]
                                        stored_trendlines[symbol] = {
                                            'lines': updated_lines,
                                            'stored_time': current_time
                                        }
                                else:
                                    logger.error(f"Failed to place limit SELL order for {symbol}")
                            else:
                                logger.error(f"Failed to get symbol info for {symbol}")
                        else:
                            logger.error(f"Failed to get current price for {symbol}")
                    else:
                        logger.error(f"Failed to place BUY order for {symbol}")

            # Sell Logic: Price Cross Under Trendline or EMA Cross Under
            if (price_cross_under or ema_cross_under) and symbol in active_orders:
                order_info = active_orders[symbol]
                if cancel_order(symbol, order_info['sell_order_id']):
                    sell_order_id, _ = place_market_order(symbol, "SELL", quantity=order_info['quantity'])
                    if sell_order_id:
                        del active_orders[symbol]
                        message = f"Sell #{symbol} - {'Price Cross Under Trendline' if price_cross_under else 'EMA Cross Under'}"
                        title = f"{'Price Cross Under' if price_cross_under else 'EMA Cross Under'} {symbol}"
                        image_buffer = plot_candles(historical_data_2h, symbol, title)
                        if image_buffer:
                            await send_telegram_message(bot, config.CHAT_ID, symbol, message, image_buffer)
                    else:
                        logger.error(f"Failed to place market SELL for {symbol}")
                else:
                    logger.error(f"Failed to cancel SELL order for {symbol}")

        except Exception as e:
            logger.error(f"Error checking {symbol}: {e}")

async def run_alert_loop(bot: Bot):
    while True:
        await check_alerts(bot)
        await asyncio.sleep(300)

async def main():
    bot = Bot(token=config.TELEGRAM_TOKEN)
    await run_alert_loop(bot)  # Run the loop directly

if __name__ == '__main__':
    nest_asyncio.apply()
    asyncio.run(main())