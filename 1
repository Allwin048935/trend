import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from binance.client import Client
import telegram
import asyncio
import json
from io import BytesIO

# Load config with both Binance and Telegram credentials
with open('config.json', 'r') as f:
    config = json.load(f)
    BINANCE_API_KEY = config['binance_api_key']
    BINANCE_API_SECRET = config['binance_api_secret']
    TELEGRAM_TOKEN = config['telegram_token']
    TELEGRAM_CHAT_ID = config['telegram_chat_id']

# Initialize Binance client with config credentials
client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

async def send_to_telegram(image_buffer):
    bot = telegram.Bot(token=TELEGRAM_TOKEN)
    try:
        await bot.send_photo(chat_id=TELEGRAM_CHAT_ID, photo=image_buffer)
    except telegram.error.BadRequest as e:
        print(f"Telegram error: {e}. Please check your chat_id and bot permissions.")

def get_binance_data(symbol='BTCUSDT', interval='1d', lookback=30):
    klines = client.get_historical_klines(symbol, interval, limit=lookback)
    df = pd.DataFrame(klines, columns=['timestamp', 'open', 'high', 'low', 'close'] + [None]*7)
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df = df.set_index('timestamp')[['open', 'high', 'low', 'close']].astype(float)
    return np.log(df)

def get_trendline_slope(data, is_support=True):
    x = np.arange(len(data))
    slope, intercept = np.polyfit(x, data, 1)
    pivot = data.argmin() if is_support else data.argmax()
    line = slope * x + intercept
    return slope if (is_support and (line <= data).all()) or (not is_support and (line >= data).all()) else np.nan

async def main():
    # Get data
    data = get_binance_data()
    
    # Calculate slopes
    support_slope = get_trendline_slope(data['low'], True)
    resist_slope = get_trendline_slope(data['high'], False)
    
    # Plot
    plt.style.use('dark_background')
    fig, ax1 = plt.subplots(figsize=(10, 5))
    ax2 = ax1.twinx()
    
    data['close'].plot(ax=ax1, label='Price')
    ax2.axhline(support_slope, color='green', label='Support Slope')
    ax2.axhline(resist_slope, color='red', label='Resistance Slope')
    
    ax1.set_ylabel('Price (log)')
    ax2.set_ylabel('Slope')
    plt.title(f"BTCUSDT Trend - {pd.Timestamp.now().strftime('%Y-%m-%d')}")
    ax1.legend(loc='upper left')
    ax2.legend(loc='upper right')
    
    # Send to Telegram
    buffer = BytesIO()
    plt.savefig(buffer, format='png', bbox_inches='tight')
    buffer.seek(0)
    plt.close()
    await send_to_telegram(buffer)

if __name__ == "__main__":
    asyncio.run(main())
