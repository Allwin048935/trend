import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from binance.client import Client
import telegram
import asyncio
import json
from io import BytesIO
import mplfinance as mpf

# Load config
with open('config.json', 'r') as f:
    config = json.load(f)
    BINANCE_API_KEY = config['binance_api_key']
    BINANCE_API_SECRET = config['binance_api_secret']
    TELEGRAM_TOKEN = config['telegram_token']
    TELEGRAM_CHAT_ID = config['telegram_chat_id']

client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

async def send_to_telegram(image_buffer):
    bot = telegram.Bot(token=TELEGRAM_TOKEN)
    try:
        await bot.send_photo(chat_id=TELEGRAM_CHAT_ID, photo=image_buffer)
    except telegram.error.BadRequest as e:
        print(f"Telegram error: {e}. Please check your chat_id and bot permissions.")

def get_binance_data(symbol='BTCUSDT', interval='8h', lookback=100):
    klines = client.get_historical_klines(symbol, interval, limit=lookback)
    df = pd.DataFrame(klines, columns=['timestamp', 'open', 'high', 'low', 'close'] + [None]*7)
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df = df.set_index('timestamp')[['open', 'high', 'low', 'close']].astype(float)
    df.columns = ['Open', 'High', 'Low', 'Close']
    return df

def calculate_trendline_set(data_segment):
    x = np.arange(len(data_segment))
    
    # Support trendline
    support_indices = data_segment['Low'].nsmallest(2).index
    support_x = [data_segment.index.get_loc(idx) for idx in support_indices]
    support_y = [data_segment['Low'].loc[idx] for idx in support_indices]
    support_slope, support_intercept = np.polyfit(support_x, support_y, 1)
    support_line = support_slope * x + support_intercept
    
    # Resistance trendline
    resist_indices = data_segment['High'].nlargest(2).index
    resist_x = [data_segment.index.get_loc(idx) for idx in resist_indices]
    resist_y = [data_segment['High'].loc[idx] for idx in resist_indices]
    resist_slope, resist_intercept = np.polyfit(resist_x, resist_y, 1)
    resist_line = resist_slope * x + resist_intercept
    
    # Channel type
    if support_slope > 0 and resist_slope > 0:
        channel_type = "Ascending"
    elif support_slope < 0 and resist_slope < 0:
        channel_type = "Descending"
    else:
        channel_type = "Horizontal"
    
    return support_line, resist_line, channel_type

def calculate_all_trendlines(data, window=20):
    trendline_sets = []
    num_sets = len(data) // window  # Number of complete 20-candle sets
    for i in range(num_sets):
        start_idx = i * window
        end_idx = (i + 1) * window
        segment = data.iloc[start_idx:end_idx]
        support_line, resist_line, channel_type = calculate_trendline_set(segment)
        trendline_sets.append({
            'support': pd.Series(support_line, index=segment.index),
            'resistance': pd.Series(resist_line, index=segment.index),
            'channel_type': channel_type,
            'start_idx': start_idx
        })
    return trendline_sets

async def plot_candles(df, symbol='BTCUSDT'):
    if df.empty:
        return None
    
    # Calculate all trendline sets
    trendline_sets = calculate_all_trendlines(df)
    print(f"Number of trendline sets created: {len(trendline_sets)}")
    
    # Prepare addplots
    addplots = []
    colors = ['green', 'lime', 'cyan', 'yellow', 'orange']  # Different colors for each set
    for i, set_data in enumerate(trendline_sets):
        color = colors[i % len(colors)]  # Cycle through colors
        addplots.append(mpf.make_addplot(set_data['support'], color=color, linestyle='--', 
                                        label=f"Support {i+1} ({set_data['channel_type']})"))
        addplots.append(mpf.make_addplot(set_data['resistance'], color=color, linestyle='--', 
                                        label=f"Resistance {i+1} ({set_data['channel_type']})"))
    
    # Market colors and style
    mc = mpf.make_marketcolors(up='#2fc71e', down='#ed2f1a', inherit=True)
    s = mpf.make_mpf_style(base_mpl_style=['bmh', 'dark_background'], marketcolors=mc, y_on_right=True)
    
    # Plot
    fig, axlist = mpf.plot(
        df,
        figratio=(12, 6),
        type="candle",
        style=s,
        tight_layout=True,
        datetime_format='%Y-%m-%d %H:%M',
        ylabel="Price ($)",
        addplot=addplots,
        returnfig=True
    )
    
    ax = axlist[0]
    # Set y-axis limits with padding
    price_range = df['High'].max() - df['Low'].min()
    ax.set_ylim(df['Low'].min() - 0.05 * price_range, df['High'].max() + 0.05 * price_range)
    
    # Customize title and legend
    ax.set_title(f"{symbol} - 8h Candles - {pd.Timestamp.now().strftime('%Y-%m-%d')}", 
                 fontsize=16, style='italic', fontfamily='sans-serif')
    ax.legend(loc='upper left', fontsize=8)
    
    # Save to buffer
    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)
    return buf

async def main():
    # Get data
    data = get_binance_data(interval='8h', lookback=100)  # Fetch 100 8h candles
    
    # Plot and send
    buffer = await plot_candles(data)
    if buffer:
        await send_to_telegram(buffer)

if __name__ == "__main__":
    asyncio.run(main())