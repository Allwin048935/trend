import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from binance.client import Client
import telegram
import asyncio
import json
from io import BytesIO

# Load config
with open('config.json', 'r') as f:
    config = json.load(f)
    BINANCE_API_KEY = config['binance_api_key']
    BINANCE_API_SECRET = config['binance_api_secret']
    TELEGRAM_TOKEN = config['telegram_token']
    TELEGRAM_CHAT_ID = config['telegram_chat_id']

client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

async def send_to_telegram(image_buffer):
    bot = telegram.Bot(token=TELEGRAM_TOKEN)
    try:
        await bot.send_photo(chat_id=TELEGRAM_CHAT_ID, photo=image_buffer)
    except telegram.error.BadRequest as e:
        print(f"Telegram error: {e}. Please check your chat_id and bot permissions.")

def get_binance_data(symbol='BTCUSDT', interval='1d', lookback=30):
    klines = client.get_historical_klines(symbol, interval, limit=lookback)
    df = pd.DataFrame(klines, columns=['timestamp', 'open', 'high', 'low', 'close'] + [None]*7)
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df = df.set_index('timestamp')[['open', 'high', 'low', 'close']].astype(float)
    return np.log(df)

def calculate_trendlines(data):
    x = np.arange(len(data))
    x_extended = np.arange(-len(data)//2, len(data) + len(data)//2)  # Extend line both ways
    
    # Support trendline - find two lowest points
    support_indices = data['low'].nsmallest(2).index
    support_x = [data.index.get_loc(idx) for idx in support_indices]
    support_y = [data['low'].loc[idx] for idx in support_indices]
    support_slope, support_intercept = np.polyfit(support_x, support_y, 1)
    support_line = support_slope * x_extended + support_intercept
    
    # Resistance trendline - find two highest points
    resist_indices = data['high'].nlargest(2).index
    resist_x = [data.index.get_loc(idx) for idx in resist_indices]
    resist_y = [data['high'].loc[idx] for idx in resist_indices]
    resist_slope, resist_intercept = np.polyfit(resist_x, resist_y, 1)
    resist_line = resist_slope * x_extended + resist_intercept
    
    # Determine channel type
    if support_slope > 0 and resist_slope > 0:
        channel_type = "Ascending Channel"
    elif support_slope < 0 and resist_slope < 0:
        channel_type = "Descending Channel"
    else:
        channel_type = "Horizontal Channel"
    
    return support_line, resist_line, channel_type, x_extended

async def main():
    # Get data
    data = get_binance_data()
    
    # Calculate trendlines
    support_line, resist_line, channel_type, x_extended = calculate_trendlines(data)
    
    # Create extended datetime index for plotting
    time_delta = data.index[1] - data.index[0]
    extended_dates = [data.index[0] + time_delta * i for i in x_extended]
    
    # Plot
    plt.style.use('dark_background')
    fig, ax = plt.subplots(figsize=(12, 6))
    
    # Plot price
    ax.plot(data.index, data['close'], label='Price', color='white')
    
    # Plot extended trendlines
    ax.plot(extended_dates, support_line, color='green', label='Support', linestyle='--')
    ax.plot(extended_dates, resist_line, color='red', label='Resistance', linestyle='--')
    
    ax.set_ylabel('Price (log scale)')
    plt.title(f"BTCUSDT - {channel_type} - {pd.Timestamp.now().strftime('%Y-%m-%d')}")
    ax.legend(loc='upper left')
    
    # Adjust layout
    plt.xticks(rotation=45)
    plt.tight_layout()
    
    # Send to Telegram
    buffer = BytesIO()
    plt.savefig(buffer, format='png', bbox_inches='tight')
    buffer.seek(0)
    plt.close()
    await send_to_telegram(buffer)

if __name__ == "__main__":
    asyncio.run(main())