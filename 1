import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from binance.client import Client
import telegram
import asyncio
import json
from io import BytesIO

# Load config
with open('config.json', 'r') as f:
    config = json.load(f)
    BINANCE_API_KEY = config['binance_api_key']
    BINANCE_API_SECRET = config['binance_api_secret']
    TELEGRAM_TOKEN = config['telegram_token']
    TELEGRAM_CHAT_ID = config['telegram_chat_id']

client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

async def send_to_telegram(image_buffer):
    bot = telegram.Bot(token=TELEGRAM_TOKEN)
    try:
        await bot.send_photo(chat_id=TELEGRAM_CHAT_ID, photo=image_buffer)
    except telegram.error.BadRequest as e:
        print(f"Telegram error: {e}. Please check your chat_id and bot permissions.")

def get_binance_data(symbol='BTCUSDT', interval='1d', lookback=30):
    klines = client.get_historical_klines(symbol, interval, limit=lookback)
    df = pd.DataFrame(klines, columns=['timestamp', 'open', 'high', 'low', 'close'] + [None]*7)
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df = df.set_index('timestamp')[['open', 'high', 'low', 'close']].astype(float)
    return np.log(df)

def calculate_trendlines(data):
    x = np.arange(len(data))
    
    # Support trendline (based on lows)
    support_idx = data['low'].argmin()
    support_slope, support_intercept = np.polyfit(
        [0, support_idx, len(data)-1], 
        [data['low'].iloc[0], data['low'].iloc[support_idx], data['low'].iloc[-1]], 
        1
    )
    support_line = support_slope * x + support_intercept
    
    # Resistance trendline (based on highs)
    resist_idx = data['high'].argmax()
    resist_slope, resist_intercept = np.polyfit(
        [0, resist_idx, len(data)-1], 
        [data['high'].iloc[0], data['high'].iloc[resist_idx], data['high'].iloc[-1]], 
        1
    )
    resist_line = resist_slope * x + resist_intercept
    
    # Determine channel type
    if support_slope > 0 and resist_slope > 0:
        channel_type = "Ascending Channel"
    elif support_slope < 0 and resist_slope < 0:
        channel_type = "Descending Channel"
    else:
        channel_type = "Horizontal Channel"
    
    return support_line, resist_line, channel_type

async def main():
    # Get data
    data = get_binance_data()
    
    # Calculate trendlines
    support_line, resist_line, channel_type = calculate_trendlines(data)
    
    # Plot
    plt.style.use('dark_background')
    fig, ax = plt.subplots(figsize=(12, 6))
    
    # Plot price
    data['close'].plot(ax=ax, label='Price', color='white')
    
    # Plot trendlines
    ax.plot(data.index, support_line, color='green', label='Support', linestyle='--')
    ax.plot(data.index, resist_line, color='red', label='Resistance', linestyle='--')
    
    ax.set_ylabel('Price (log scale)')
    plt.title(f"BTCUSDT - {channel_type} - {pd.Timestamp.now().strftime('%Y-%m-%d')}")
    ax.legend(loc='upper left')
    
    # Adjust layout
    plt.xticks(rotation=45)
    plt.tight_layout()
    
    # Send to Telegram
    buffer = BytesIO()
    plt.savefig(buffer, format='png', bbox_inches='tight')
    buffer.seek(0)
    plt.close()
    await send_to_telegram(buffer)

if __name__ == "__main__":
    asyncio.run(main())