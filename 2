import ccxt
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import telegram
import requests
import asyncio
from io import BytesIO
import mplfinance as mpf
from config import BINANCE_API_KEY, BINANCE_API_SECRET, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID

# Initialize Binance exchange
exchange = ccxt.binance({
    'apiKey': BINANCE_API_KEY,
    'secret': BINANCE_API_SECRET,
    'enableRateLimit': True,
})

# Parameters
PRIMARY_TRENDLINE_LENGTH = 20
SECONDARY_TRENDLINE_LENGTH = 15
MAX_TRENDLINES = 2
TIMEFRAME = '1d'
LIMIT = 100

# Fetch selected symbols dynamically from Binance
url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
try:
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()
    SELECTED_SYMBOLS = [
        s['symbol'] for s in data['symbols']
        if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING'
    ]
except requests.exceptions.RequestException as e:
    print(f"Error fetching symbols: {e}")
    SELECTED_SYMBOLS = []

# Get OHLCV data
def get_ohlcv(symbol, timeframe=TIMEFRAME, limit=LIMIT):
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df = df.rename(columns={'open': 'Open', 'high': 'High', 'low': 'Low', 'close': 'Close'})
        return df
    except Exception as e:
        print(f"Error fetching data for {symbol}: {e}")
        return None

# Trendlines
def find_pivot_points(series, length, left_length):
    pivots_high = pd.Series(index=series.index, dtype=float)
    pivots_low = pd.Series(index=series.index, dtype=float)
    
    for i in range(left_length, len(series) - left_length):
        if series.iloc[i] == max(series.iloc[i-left_length:i+left_length+1]):
            pivots_high.iloc[i] = series.iloc[i]
        if series.iloc[i] == min(series.iloc[i-left_length:i+left_length+1]):
            pivots_low.iloc[i] = series.iloc[i]
    
    return pivots_high, pivots_low

def calculate_trendlines(df, pivots, length, extension=50, max_lines=MAX_TRENDLINES):
    trendlines = []
    pivot_points = pivots.dropna()
    if len(pivot_points) < 2:
        return trendlines
    
    timestamps = df['timestamp']
    last_timestamp = timestamps.iloc[-1]
    
    for i in range(1, len(pivot_points)):
        idx1 = pivot_points.index[i-1]
        idx2 = pivot_points.index[i]
        
        x1 = timestamps.loc[idx1]
        x2 = timestamps.loc[idx2]
        y1 = pivot_points.iloc[i-1]
        y2 = pivot_points.iloc[i]
        
        time_diff = (x2 - x1).total_seconds() / 3600
        slope = (y2 - y1) / time_diff if time_diff != 0 else 0
        
        x_end = min(timestamps.iloc[-1] + pd.Timedelta(minutes=15 * extension), last_timestamp)
        extension_time = (x_end - x2).total_seconds() / 3600
        y_end = y2 + slope * extension_time
        
        trendlines.append({
            'x1': x1, 'y1': y1,
            'x2': x_end, 'y2': y_end,
            'slope': slope
        })
    
    return trendlines[-max_lines:] if len(trendlines) > max_lines else trendlines

# Plotting with candlesticks, close price, and trendlines
def create_chart(df, primary_high_trendlines, primary_low_trendlines,
                secondary_high_trendlines, secondary_low_trendlines, symbol):
    if df.empty:
        return None
    
    # Prepare data for candlestick plot
    mpf_data = df.set_index('timestamp')[['Open', 'High', 'Low', 'Close']]
    
    # Create market colors and style
    mc = mpf.make_marketcolors(up='#2fc71e', down='#ed2f1a', inherit=True)
    s = mpf.make_mpf_style(base_mpl_style=['bmh', 'dark_background'], marketcolors=mc, y_on_right=True)
    
    # Create the plot
    fig, axlist = mpf.plot(
        mpf_data,
        figratio=(15, 8),
        type='candle',
        style=s,
        title=f'{symbol} {TIMEFRAME} - Price with Trendlines',
        ylabel='Price ($)',
        addplot=[
            mpf.make_addplot(df['Close'], color='blue', width=1, label='Close Price')
        ],
        returnfig=True
    )
    
    ax = axlist[0]
    
    # Plot trendlines
    for tl in primary_high_trendlines + primary_low_trendlines:
        color = '#cf0a83' if tl['slope'] < 0 else '#027521'
        ax.plot([tl['x1'], tl['x2']], [tl['y1'], tl['y2']], color=color, linewidth=2)
    
    for tl in secondary_high_trendlines + secondary_low_trendlines:
        color = 'red' if tl['slope'] < 0 else 'green'
        ax.plot([tl['x1'], tl['x2']], [tl['y1'], tl['y2']], color=color, linestyle='--', linewidth=1)
    
    # Add legend
    ax.legend()
    
    # Save to buffer
    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)
    return buf

# Send to Telegram
async def send_to_telegram(symbol, buffer):
    bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)
    await bot.send_photo(chat_id=TELEGRAM_CHAT_ID, photo=buffer)

# Main execution for multiple symbols
def analyze_symbol(symbol):
    print(f"Analyzing {symbol}...")
    df = get_ohlcv(symbol)
    if df is None or df.empty:
        return
    
    price_high_pivots, price_low_pivots = find_pivot_points(df['Close'], PRIMARY_TRENDLINE_LENGTH, PRIMARY_TRENDLINE_LENGTH//2)
    price_sec_high_pivots, price_sec_low_pivots = find_pivot_points(df['Close'], SECONDARY_TRENDLINE_LENGTH, SECONDARY_TRENDLINE_LENGTH//2)
    
    primary_high_trendlines = calculate_trendlines(df, price_high_pivots, PRIMARY_TRENDLINE_LENGTH)
    primary_low_trendlines = calculate_trendlines(df, price_low_pivots, PRIMARY_TRENDLINE_LENGTH)
    secondary_high_trendlines = calculate_trendlines(df, price_sec_high_pivots, SECONDARY_TRENDLINE_LENGTH, 25)
    secondary_low_trendlines = calculate_trendlines(df, price_sec_low_pivots, SECONDARY_TRENDLINE_LENGTH, 25)
    
    chart_buffer = create_chart(df, primary_high_trendlines, primary_low_trendlines,
                              secondary_high_trendlines, secondary_low_trendlines, symbol)
    
    if chart_buffer:
        asyncio.run(send_to_telegram(symbol, chart_buffer))

def main():
    # Limit to top N symbols or specific symbols if desired
    symbols_to_analyze = SELECTED_SYMBOLS[:50]  # Example: analyze first 50 symbols
    
    for symbol in symbols_to_analyze:
        try:
            analyze_symbol(symbol)
        except Exception as e:
            print(f"Error processing {symbol}: {e}")

if __name__ == "__main__":
    main()