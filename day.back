import requests
import ccxt
import pandas as pd
import asyncio
import nest_asyncio
from telegram import Bot, Update
from telegram.ext import Application, ContextTypes
import config  # Import the config module
import ta  # Import ta library
import logging
from datetime import datetime, timedelta
import time
import telegram.error

# Set up logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

file_handler = logging.FileHandler('trading_bot.log')
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))

console_handler = logging.StreamHandler()
console_handler.setLevel(logging.WARNING)
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))

logger.handlers.clear()
logger.addHandler(file_handler)
logger.addHandler(console_handler)

logging.getLogger('urllib3').setLevel(logging.WARNING)
logging.getLogger('ccxt').setLevel(logging.WARNING)

# Time interval and trading parameters
CHECK_INTERVAL = '5m'  # For checking 5-minute candle close
DAILY_INTERVAL = '1d'  # For fetching daily candle open
TRADE_FEE_PERCENT = 0.05  # 0.05% fee for futures

# Binance client
binance = ccxt.binance({
    'apiKey': config.BINANCE_API_KEY,
    'secret': config.BINANCE_API_SECRET,
    'enableRateLimit': True,
    'options': {'defaultType': 'future'}
})

# Store active positions, last alert times, and virtual balance
active_positions = {}  # Format: {symbol: {'type': 'long'/'short', 'entry_price': float, 'quantity': float, 'amount_usdt': float, 'entry_fee': float}}
last_alert_times = {}  # Track last alert time per symbol
virtual_balance = 10000.0  # Starting virtual balance in USD
trade_history = []  # Store trade details for tracking

# Fetch SELECTED_SYMBOLS dynamically from Binance Futures
def fetch_binance_symbols():
    url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        symbols = [
            s['symbol'] for s in data['symbols']
            if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING' and s['contractType'] == 'PERPETUAL'
        ]
        logger.info(f"Fetched {len(symbols)} active USDT perpetual futures symbols from Binance")
        return symbols
    except requests.exceptions.RequestException as e:
        logger.error(f"Error fetching futures symbols from Binance: {e}")
        return []

# Helper Functions for Virtual Trading
def get_current_price(symbol, retries=3, delay=2):
    symbol_with_slash = symbol.replace("USDT", "/USDT")
    for attempt in range(retries):
        try:
            ticker = binance.fetch_ticker(symbol_with_slash)
            current_price = ticker['last']
            if current_price is None:
                raise ValueError("Last price is None")
            return current_price
        except Exception as e:
            logger.warning(f"Failed to fetch price for {symbol} on attempt {attempt + 1}/{retries}: {e}")
            if attempt < retries - 1:
                time.sleep(delay)
            else:
                logger.error(f"Exhausted retries for {symbol}: No price data")
                return None

def calculate_unrealized_pnl():
    total_unrealized_pnl_percent = 0.0
    total_unrealized_pnl_usdt = 0.0
    for symbol, position in active_positions.items():
        current_price = get_current_price(symbol)
        if current_price is None:
            logger.warning(f"Cannot calculate unrealized PNL for {symbol}: No price data")
            continue
        entry_price = position['entry_price']
        quantity = position['quantity']
        amount_usdt = position['amount_usdt']
        if position['type'] == 'long':
            unrealized_pnl_percent = ((current_price - entry_price) / entry_price) * 100
            unrealized_pnl_usdt = (current_price - entry_price) * quantity
        else:  # short
            unrealized_pnl_percent = ((entry_price - current_price) / entry_price) * 100
            unrealized_pnl_usdt = (entry_price - current_price) * quantity
        total_unrealized_pnl_percent += unrealized_pnl_percent
        total_unrealized_pnl_usdt += unrealized_pnl_usdt
    return total_unrealized_pnl_percent, total_unrealized_pnl_usdt

def simulate_open_long(symbol, amount_usdt=15.0):
    global virtual_balance
    current_price = get_current_price(symbol)
    if current_price is None:
        logger.error(f"Cannot simulate LONG for {symbol}: No price data")
        return None, None, None, None
    if virtual_balance < amount_usdt:
        logger.error(f"Insufficient virtual balance for LONG on {symbol}: {virtual_balance} < {amount_usdt}")
        return None, None, None, None
    quantity = amount_usdt / current_price
    fee = amount_usdt * (TRADE_FEE_PERCENT / 100)
    total_deduction = amount_usdt + fee
    virtual_balance -= total_deduction
    logger.info(f"Simulated LONG for {symbol}: Price {current_price:.8f}, Quantity {quantity:.8f}, Amount {amount_usdt:.2f}, Fee {fee:.4f}, Total Deduction {total_deduction:.4f}, New Balance {virtual_balance:.2f}")
    return current_price, quantity, amount_usdt, fee

def simulate_open_short(symbol, amount_usdt=15.0):
    global virtual_balance
    current_price = get_current_price(symbol)
    if current_price is None:
        logger.error(f"Cannot simulate SHORT for {symbol}: No price data")
        return None, None, None, None
    if virtual_balance < amount_usdt:
        logger.error(f"Insufficient virtual balance for SHORT on {symbol}: {virtual_balance} < {amount_usdt}")
        return None, None, None, None
    quantity = amount_usdt / current_price
    fee = amount_usdt * (TRADE_FEE_PERCENT / 100)
    total_deduction = amount_usdt + fee
    virtual_balance -= total_deduction
    logger.info(f"Simulated SHORT for {symbol}: Price {current_price:.8f}, Quantity {quantity:.8f}, Amount {amount_usdt:.2f}, Fee {fee:.4f}, Total Deduction {total_deduction:.4f}, New Balance {virtual_balance:.2f}")
    return current_price, quantity, amount_usdt, fee

def simulate_close_long(symbol, entry_price, quantity, amount_usdt, entry_fee):
    global virtual_balance
    current_price = get_current_price(symbol)
    if current_price is None:
        logger.error(f"Cannot simulate CLOSE LONG for {symbol}: No price data")
        return None
    profit_percentage = ((current_price - entry_price) / entry_price) * 100
    proceeds = quantity * current_price
    fee = proceeds * (TRADE_FEE_PERCENT / 100)
    net_profit = ((current_price - entry_price) * quantity) - (entry_fee + fee)
    net_proceeds = proceeds - fee
    balance_before = virtual_balance
    virtual_balance += net_proceeds
    trade_history.append({
        'symbol': symbol,
        'type': 'long',
        'entry_price': entry_price,
        'exit_price': current_price,
        'quantity': quantity,
        'profit_percentage': profit_percentage,
        'proceeds': proceeds,
        'entry_fee': entry_fee,
        'exit_fee': fee,
        'net_profit': net_profit,
        'net_proceeds': net_proceeds,
        'balance_before': balance_before,
        'balance_after': virtual_balance,
        'timestamp': datetime.now()
    })
    logger.info(f"Simulated CLOSE LONG for {symbol}: Entry Price {entry_price:.8f}, Exit Price {current_price:.8f}, Quantity {quantity:.8f}, Proceeds {proceeds:.2f}, Entry Fee {entry_fee:.4f}, Exit Fee {fee:.4f}, Net Profit {net_profit:.4f}, Net Proceeds {net_proceeds:.4f}, Profit {profit_percentage:.2f}%, Balance Before {balance_before:.2f}, Balance After {virtual_balance:.2f}")
    return current_price

def simulate_close_short(symbol, entry_price, quantity, amount_usdt, entry_fee):
    global virtual_balance
    current_price = get_current_price(symbol)
    if current_price is None:
        logger.error(f"Cannot simulate CLOSE SHORT for {symbol}: No price data")
        return None
    profit_percentage = ((entry_price - current_price) / entry_price) * 100
    proceeds = quantity * (entry_price - current_price + current_price)
    fee = proceeds * (TRADE_FEE_PERCENT / 100)
    net_profit = ((entry_price - current_price) * quantity) - (entry_fee + fee)
    net_proceeds = proceeds - fee
    balance_before = virtual_balance
    virtual_balance += net_proceeds
    trade_history.append({
        'symbol': symbol,
        'type': 'short',
        'entry_price': entry_price,
        'exit_price': current_price,
        'quantity': quantity,
        'profit_percentage': profit_percentage,
        'proceeds': proceeds,
        'entry_fee': entry_fee,
        'exit_fee': fee,
        'net_profit': net_profit,
        'net_proceeds': net_proceeds,
        'balance_before': balance_before,
        'balance_after': virtual_balance,
        'timestamp': datetime.now()
    })
    logger.info(f"Simulated CLOSE SHORT for {symbol}: Entry Price {entry_price:.8f}, Exit Price {current_price:.8f}, Quantity {quantity:.8f}, Proceeds {proceeds:.2f}, Entry Fee {entry_fee:.4f}, Exit Fee {fee:.4f}, Net Profit {net_profit:.4f}, Net Proceeds {net_proceeds:.4f}, Profit {profit_percentage:.2f}%, Balance Before {balance_before:.2f}, Balance After {virtual_balance:.2f}")
    return current_price

# Binance Data Functions
def get_daily_open_price(symbol):
    try:
        symbol_with_slash = symbol.replace("USDT", "/USDT")
        ohlcv = binance.fetch_ohlcv(symbol_with_slash, DAILY_INTERVAL, limit=1)
        if not ohlcv:
            logger.warning(f"No daily data fetched for {symbol}")
            return None
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        return df['open'].iloc[-1]
    except ccxt.ExchangeError as e:
        logger.error(f"Binance fetch error for daily data of {symbol}: {e}")
        return None

def get_5m_close_price(symbol):
    try:
        symbol_with_slash = symbol.replace("USDT", "/USDT")
        ohlcv = binance.fetch_ohlcv(symbol_with_slash, CHECK_INTERVAL, limit=1)
        if not ohlcv:
            logger.warning(f"No 5m data fetched for {symbol}")
            return None
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        return df['close'].iloc[-1]
    except ccxt.ExchangeError as e:
        logger.error(f"Binance fetch error for 5m data of {symbol}: {e}")
        return None

# Price Comparison Check
def check_price_condition(symbol):
    daily_open = get_daily_open_price(symbol)
    current_5m_close = get_5m_close_price(symbol)
    if daily_open is None or current_5m_close is None:
        return False, False
    buy_signal = current_5m_close > daily_open
    sell_signal = current_5m_close < daily_open
    return buy_signal, sell_signal

async def send_telegram_message(bot: Bot, chat_id: str, symbol: str, message: str):
    try:
        await bot.send_message(chat_id=chat_id, text=message)
        logger.info(f"Sent alert for {symbol}: {message}")
    except Exception as e:
        logger.error(f"Failed to send Telegram message for {symbol}: {e}")

async def check_alerts(bot: Bot, symbols):
    if not symbols:
        logger.error("No symbols selected to check - bot cannot proceed without symbols")
        return
    failed_symbols = set()
    for symbol in symbols:
        if symbol in failed_symbols:
            logger.info(f"Skipping {symbol} due to previous price fetch failures")
            continue
        try:
            current_time = datetime.now()
            last_alert = last_alert_times.get(symbol)
            if last_alert and (current_time - last_alert).total_seconds() < 300:
                logger.info(f"Cooldown active for {symbol}, skipping alert")
                continue
            buy_signal, sell_signal = check_price_condition(symbol)
            
            # Calculate trade statistics
            total_trades = len(trade_history)
            overall_profit_loss = sum(trade['net_profit'] for trade in trade_history)
            open_trades = len(active_positions)
            
            # Handle BUY signal (close SHORT if exists and open LONG)
            if buy_signal:
                unrealized_pnl_percent, unrealized_pnl_usdt = calculate_unrealized_pnl()
                if symbol in active_positions and active_positions[symbol]['type'] == 'short':
                    position = active_positions[symbol]
                    entry_price = position['entry_price']
                    quantity = position['quantity']
                    amount_usdt = position['amount_usdt']
                    entry_fee = position['entry_fee']
                    exit_price = simulate_close_short(symbol, entry_price, quantity, amount_usdt, entry_fee)
                    if exit_price is None:
                        logger.error(f"Failed to simulate CLOSE SHORT for {symbol}")
                        failed_symbols.add(symbol)
                        continue
                    net_profit = ((entry_price - exit_price) * quantity) - (entry_fee + (quantity * (entry_price - exit_price + exit_price) * (TRADE_FEE_PERCENT / 100)))
                    total_trades += 1  # Increment for closed trade
                    open_trades -= 1   # Decrement for closed position
                    message = (f"Simulated CLOSE SHORT for #{symbol} at {exit_price:.8f}\n"
                              f"Entry Price: {entry_price:.8f}\n"
                              f"Quantity: {quantity:.8f}, Proceeds: {(quantity * (entry_price - exit_price + exit_price)):.2f} USDT\n"
                              f"Entry Fee: {entry_fee:.4f} USDT, Exit Fee: {(quantity * (entry_price - exit_price + exit_price)) * (TRADE_FEE_PERCENT / 100):.4f} USDT\n"
                              f"Net Profit: {net_profit:.4f} USDT\n"
                              f"Reason: Buy signal (5m close > daily open)\n"
                              f"Cumulative Unrealized PNL (all positions): {unrealized_pnl_percent:.2f}% ({unrealized_pnl_usdt:.2f} USDT)\n"
                              f"Virtual Balance: {virtual_balance:.2f} USDT\n"
                              f"Total Completed Trades: {total_trades}\n"
                              f"Overall Net Profit: {overall_profit_loss + net_profit:.4f} USDT\n"
                              f"Current Open Trades: {open_trades}")
                    await send_telegram_message(bot, config.CHAT_ID, symbol, message)
                    last_alert_times[symbol] = current_time
                    del active_positions[symbol]
                
                entry_price, quantity, amount_usdt, entry_fee = simulate_open_long(symbol)
                if entry_price is None:
                    logger.error(f"Failed to simulate LONG for {symbol}")
                    failed_symbols.add(symbol)
                    continue
                active_positions[symbol] = {
                    'type': 'long',
                    'entry_price': entry_price,
                    'quantity': quantity,
                    'amount_usdt': amount_usdt,
                    'entry_fee': entry_fee
                }
                open_trades += 1  # Increment for opened position
                message = (f"Simulated LONG for #{symbol} at {entry_price:.8f}\n"
                          f"Quantity: {quantity:.8f}, Amount: {amount_usdt:.2f} USDT\n"
                          f"Fee: {entry_fee:.4f} USDT\n"
                          f"Cumulative Unrealized PNL (all positions): {unrealized_pnl_percent:.2f}% ({unrealized_pnl_usdt:.2f} USDT)\n"
                          f"Virtual Balance: {virtual_balance:.2f} USDT\n"
                          f"Total Completed Trades: {total_trades}\n"
                          f"Overall Net Profit: {overall_profit_loss:.4f} USDT\n"
                          f"Current Open Trades: {open_trades}")
                await send_telegram_message(bot, config.CHAT_ID, symbol, message)
                last_alert_times[symbol] = current_time
            
            # Handle SELL signal (close LONG if exists and open SHORT)
            if sell_signal:
                unrealized_pnl_percent, unrealized_pnl_usdt = calculate_unrealized_pnl()
                if symbol in active_positions and active_positions[symbol]['type'] == 'long':
                    position = active_positions[symbol]
                    entry_price = position['entry_price']
                    quantity = position['quantity']
                    amount_usdt = position['amount_usdt']
                    entry_fee = position['entry_fee']
                    exit_price = simulate_close_long(symbol, entry_price, quantity, amount_usdt, entry_fee)
                    if exit_price is None:
                        logger.error(f"Failed to simulate CLOSE LONG for {symbol}")
                        failed_symbols.add(symbol)
                        continue
                    net_profit = ((exit_price - entry_price) * quantity) - (entry_fee + (quantity * exit_price * (TRADE_FEE_PERCENT / 100)))
                    total_trades += 1  # Increment for closed trade
                    open_trades -= 1   # Decrement for closed position
                    message = (f"Simulated CLOSE LONG for #{symbol} at {exit_price:.8f}\n"
                              f"Entry Price: {entry_price:.8f}\n"
                              f"Quantity: {quantity:.8f}, Proceeds: {quantity * exit_price:.2f} USDT\n"
                              f"Entry Fee: {entry_fee:.4f} USDT, Exit Fee: {(quantity * exit_price) * (TRADE_FEE_PERCENT / 100):.4f} USDT\n"
                              f"Net Profit: {net_profit:.4f} USDT\n"
                              f"Reason: Sell signal (5m close < daily open)\n"
                              f"Cumulative Unrealized PNL (all positions): {unrealized_pnl_percent:.2f}% ({unrealized_pnl_usdt:.2f} USDT)\n"
                              f"Virtual Balance: {virtual_balance:.2f} USDT\n"
                              f"Total Completed Trades: {total_trades}\n"
                              f"Overall Net Profit: {overall_profit_loss + net_profit:.4f} USDT\n"
                              f"Current Open Trades: {open_trades}")
                    await send_telegram_message(bot, config.CHAT_ID, symbol, message)
                    last_alert_times[symbol] = current_time
                    del active_positions[symbol]
                
                entry_price, quantity, amount_usdt, entry_fee = simulate_open_short(symbol)
                if entry_price is None:
                    logger.error(f"Failed to simulate SHORT for {symbol}")
                    failed_symbols.add(symbol)
                    continue
                active_positions[symbol] = {
                    'type': 'short',
                    'entry_price': entry_price,
                    'quantity': quantity,
                    'amount_usdt': amount_usdt,
                    'entry_fee': entry_fee
                }
                open_trades += 1  # Increment for opened position
                message = (f"Simulated SHORT for #{symbol} at {entry_price:.8f}\n"
                          f"Quantity: {quantity:.8f}, Amount: {amount_usdt:.2f} USDT\n"
                          f"Fee: {entry_fee:.4f} USDT\n"
                          f"Cumulative Unrealized PNL (all positions): {unrealized_pnl_percent:.2f}% ({unrealized_pnl_usdt:.2f} USDT)\n"
                          f"Virtual Balance: {virtual_balance:.2f} USDT\n"
                          f"Total Completed Trades: {total_trades}\n"
                          f"Overall Net Profit: {overall_profit_loss:.4f} USDT\n"
                          f"Current Open Trades: {open_trades}")
                await send_telegram_message(bot, config.CHAT_ID, symbol, message)
                last_alert_times[symbol] = current_time
            
            # Check for profit/stop-loss on open positions
            if symbol in active_positions:
                position = active_positions[symbol]
                entry_price = position['entry_price']
                quantity = position['quantity']
                amount_usdt = position['amount_usdt']
                entry_fee = position['entry_fee']
                current_price = get_current_price(symbol)
                if current_price is None:
                    logger.error(f"Failed to get price for {symbol}")
                    failed_symbols.add(symbol)
                    continue
                if position['type'] == 'long':
                    profit_percentage = ((current_price - entry_price) / entry_price) * 100
                else:  # short
                    profit_percentage = ((entry_price - current_price) / entry_price) * 100
                
                close_trigger = False
                close_reason = ""
                if profit_percentage >= 15:
                    close_trigger = True
                    close_reason = "15% profit target reached"
                elif profit_percentage <= -15:
                    close_trigger = True
                    close_reason = "stop-loss triggered at -15%"
                
                if close_trigger:
                    unrealized_pnl_percent, unrealized_pnl_usdt = calculate_unrealized_pnl()
                    if position['type'] == 'long':
                        exit_price = simulate_close_long(symbol, entry_price, quantity, amount_usdt, entry_fee)
                        if exit_price is None:
                            logger.error(f"Failed to simulate CLOSE LONG for {symbol}")
                            failed_symbols.add(symbol)
                            continue
                        net_profit = ((exit_price - entry_price) * quantity) - (entry_fee + (quantity * exit_price * (TRADE_FEE_PERCENT / 100)))
                        total_trades += 1  # Increment for closed trade
                        open_trades -= 1   # Decrement for closed position
                        message = (f"Simulated CLOSE LONG for #{symbol} at {exit_price:.8f}\n"
                                  f"Entry Price: {entry_price:.8f}\n"
                                  f"Quantity: {quantity:.8f}, Proceeds: {quantity * exit_price:.2f} USDT\n"
                                  f"Entry Fee: {entry_fee:.4f} USDT, Exit Fee: {(quantity * exit_price) * (TRADE_FEE_PERCENT / 100):.4f} USDT\n"
                                  f"Net Profit: {net_profit:.4f} USDT\n"
                                  f"Reason: {close_reason}\n"
                                  f"Cumulative Unrealized PNL (all positions): {unrealized_pnl_percent:.2f}% ({unrealized_pnl_usdt:.2f} USDT)\n"
                                  f"Virtual Balance: {virtual_balance:.2f} USDT\n"
                                  f"Total Completed Trades: {total_trades}\n"
                                  f"Overall Net Profit: {overall_profit_loss + net_profit:.4f} USDT\n"
                                  f"Current Open Trades: {open_trades}")
                    else:  # short
                        exit_price = simulate_close_short(symbol, entry_price, quantity, amount_usdt, entry_fee)
                        if exit_price is None:
                            logger.error(f"Failed to simulate CLOSE SHORT for {symbol}")
                            failed_symbols.add(symbol)
                            continue
                        net_profit = ((entry_price - exit_price) * quantity) - (entry_fee + (quantity * (entry_price - exit_price + exit_price) * (TRADE_FEE_PERCENT / 100)))
                        total_trades += 1  # Increment for closed trade
                        open_trades -= 1   # Decrement for closed position
                        message = (f"Simulated CLOSE SHORT for #{symbol} at {exit_price:.8f}\n"
                                  f"Entry Price: {entry_price:.8f}\n"
                                  f"Quantity: {quantity:.8f}, Proceeds: {(quantity * (entry_price - exit_price + exit_price)):.2f} USDT\n"
                                  f"Entry Fee: {entry_fee:.4f} USDT, Exit Fee: {(quantity * (entry_price - exit_price + exit_price)) * (TRADE_FEE_PERCENT / 100):.4f} USDT\n"
                                  f"Net Profit: {net_profit:.4f} USDT\n"
                                  f"Reason: {close_reason}\n"
                                  f"Cumulative Unrealized PNL (all positions): {unrealized_pnl_percent:.2f}% ({unrealized_pnl_usdt:.2f} USDT)\n"
                                  f"Virtual Balance: {virtual_balance:.2f} USDT\n"
                                  f"Total Completed Trades: {total_trades}\n"
                                  f"Overall Net Profit: {overall_profit_loss + net_profit:.4f} USDT\n"
                                  f"Current Open Trades: {open_trades}")
                    
                    await send_telegram_message(bot, config.CHAT_ID, symbol, message)
                    last_alert_times[symbol] = current_time
                    del active_positions[symbol]
        except Exception as e:
            logger.error(f"Error checking {symbol}: {e}")
            failed_symbols.add(symbol)

async def run_alert_loop(application: Application):
    bot = application.bot
    # Fetch symbols at the start
    SELECTED_SYMBOLS = fetch_binance_symbols()
    while True:
        await check_alerts(bot, SELECTED_SYMBOLS)
        await asyncio.sleep(300)

async def main():
    application = Application.builder().token(config.TELEGRAM_TOKEN).build()
    asyncio.create_task(run_alert_loop(application))
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    nest_asyncio.apply()
    asyncio.run(main())